/**
 * 
 */
package hivis.data.view;

import java.util.List;
import java.util.Map;

import hivis.common.LSListMap;
import hivis.common.ListMap;
import hivis.data.DataSeries;
import hivis.data.DataTable;

/**
 * A view that presents the {@link DataSeries<?>} generated by a {@link TableFunction} 
 * as a {@link DataTable}, optionally including the DataSeries from the 
 * input DataTable.
 * 
 * @author O. J. Coleman
 *
 */
public class ViewTableFunction extends ViewTable {
	TableFunction function;
	boolean includeInputSeries;
	
	/**
	 * Create a new ViewTableFunction that does not include the DataSeries from the input DataTable in this DataTable view.
	 * 
	 * @param source The input DataTable.
	 * @param function The function to generate the new DataSeries.
	 */
	public ViewTableFunction(TableFunction function, DataTable... source) {
		this(function, false, source);
	}
	
	/**
	 * Create a new ViewTableFunction that optionally includes the DataSeries from the input DataTable.
	 * 
	 * @param source The input DataTable.
	 * @param function The function to generate the new DataSeries.
	 * @param includeInputSeries Whether to include the DataSeries from the input DataTable in this DataTable view.
	 */
	public ViewTableFunction(TableFunction function, boolean includeInputSeries, DataTable... source) {
		super(source);
		this.function = function;
		this.includeInputSeries = includeInputSeries;
		updateSeries();
	}

	
	@Override
	protected void updateSeries(List<Object> eventTypes) {
		series.clear();
		
		if (includeInputSeries) {
			for (DataTable dt : source) {
				series.putAll(dt.getLabelledSeries());
			}
		}
		
		ListMap<String, DataSeries<?>> map = new LSListMap<>();
		function.getSeries(source, map);
		
		for (Map.Entry<String, DataSeries<?>> s : map.entrySet()) {
			series.put(s.getKey(), s.getValue());
			s.getValue().addContainer(this);
		}
	}
}
